# @apvee/react-layout-kit - LLM Code Generation Guide

## Overview
TypeScript React layout library with responsive CSS-in-JS, built on Emotion CSS. Provides type-safe layout components with responsive props and zero-config styling.

## Installation
```bash
npm install @apvee/react-layout-kit
```

## Import Patterns
```tsx
// Main imports (recommended)
import { Box, Flex, Stack, Grid, Container } from "@apvee/react-layout-kit";

// Granular imports (tree-shaking)
import { Box } from "@apvee/react-layout-kit/components/Box";
import { Flex } from "@apvee/react-layout-kit/components/Flex";

// Types
import type { BoxProps, FlexProps } from "@apvee/react-layout-kit";
```

## Core Components

### Box (Foundation Component)
The base component with all CSS properties and responsive capabilities.

**Key Props:**
- `asChild?: boolean` - Render as child element using Slot
- `containerWidth?: number` - Programmatic container width
- `styleReset?: boolean` - Apply box-sizing reset

**Short Props (Spacing):**
```tsx
// Margin
m, mt, mb, ml, mr, ms, me, mx, my

// Padding  
p, pt, pb, pl, pr, ps, pe, px, py

// Size
w, h, miw, maw, mih, mah

// Position
top, left, bottom, right
```

**Dollar Props (All CSS properties with $ prefix):**
```tsx
$display, $position, $flexDirection, $justifyContent, $alignItems
$margin, $padding, $width, $height, $backgroundColor, $color
$fontSize, $fontWeight, $border, $borderRadius, $boxShadow
// ... all CSS properties available
```

**Examples:**
```tsx
// Basic usage
<Box $padding="m" $backgroundColor="blue" $color="white">Content</Box>

// Responsive values
<Box 
  $padding={{ xs: "s", md: "m", lg: "l" }}
  $display={{ xs: "block", md: "flex" }}
>
  Responsive content
</Box>

// Short props
<Box p="m" mx="auto" w="200px" h="100px">Content</Box>

// Component composition
<Box asChild $padding="m" $backgroundColor="blue">
  <button onClick={handleClick}>Styled Button</button>
</Box>
```

### Flex Component
Flexbox container with specialized props and Flex.Item sub-component.

**Props:**
- `align?: ResponsiveValue<AlignItems>` - Cross-axis alignment
- `justify?: ResponsiveValue<JustifyContent>` - Main-axis alignment  
- `direction?: ResponsiveValue<FlexDirection>` - Flex direction
- `wrap?: ResponsiveValue<FlexWrap>` - Wrapping behavior
- `gap?: ResponsiveValue<SpacingValue>` - Space between items
- `rowGap?, columnGap?` - Specific gap control

**Flex.Item Props:**
- `flex?, grow?, shrink?, basis?` - Flex properties
- `alignSelf?, order?` - Individual item control

**Examples:**
```tsx
// Basic flex container
<Flex align="center" justify="space-between" gap="m">
  <div>Item 1</div>
  <div>Item 2</div>
</Flex>

// Responsive flex
<Flex 
  direction={{ xs: "column", md: "row" }}
  gap={{ xs: "s", md: "l" }}
>
  <Flex.Item flex={1}>Grows</Flex.Item>
  <Flex.Item grow={2}>Grows 2x</Flex.Item>
</Flex>
```

### Stack Component
Vertical stacking with consistent spacing.

**Props:**
- `align?: ResponsiveValue<AlignItems>` - Horizontal alignment
- `justify?: ResponsiveValue<JustifyContent>` - Vertical alignment
- `gap?: ResponsiveValue<SpacingValue>` - Space between items

**Examples:**
```tsx
<Stack gap="md" align="center">
  <h1>Title</h1>
  <p>Content</p>
  <button>Action</button>
</Stack>
```

### Grid Component
CSS Grid with responsive columns and Grid.Col sub-component.

**Props:**
- `columns?: ResponsiveValue<number>` - Number of columns
- `gutter?: ResponsiveValue<SpacingValue>` - Space between items
- `align?, justify?` - Grid alignment

**Grid.Col Props:**
- `span?: ResponsiveValue<number>` - Columns to span
- `offset?: ResponsiveValue<number>` - Column offset

**Examples:**
```tsx
<Grid columns={{ xs: 1, md: 3 }} gutter="m">
  <Grid.Col span={{ xs: 1, md: 2 }}>Wide item</Grid.Col>
  <Grid.Col>Regular item</Grid.Col>
</Grid>
```

### SimpleGrid Component
Equal-width grid layout.

**Props:**
- `cols?: ResponsiveValue<number>` - Number of columns
- `spacing?: ResponsiveValue<SpacingValue>` - Gap between items
- `minChildWidth?: ResponsiveValue<number>` - Min child width

**Examples:**
```tsx
<SimpleGrid cols={{ xs: 1, sm: 2, md: 3 }} spacing="m">
  <div>Card 1</div>
  <div>Card 2</div>
  <div>Card 3</div>
</SimpleGrid>
```

### Container Component
Content wrapper with max-width and centering.

**Props:**
- `size?: ResponsiveValue<number>` - Max width in pixels
- `fluid?: ResponsiveValue<boolean>` - Full width mode

**Examples:**
```tsx
<Container size={{ xs: 320, md: 1200 }}>
  <div>Centered content</div>
</Container>
```

### Other Components

**Center:** Perfect centering utility
```tsx
<Center $height="200px">
  <button>Centered Button</button>
</Center>
```

**AspectRatio:** Maintain aspect ratios
```tsx
<AspectRatio ratio={16/9}>
  <iframe src="video.jpg" />
</AspectRatio>
```

**Group:** Horizontal flex layouts
```tsx
<Group gap="s" wrap="nowrap">
  <button>Save</button>
  <button>Cancel</button>
</Group>
```

**Space:** Invisible spacing utility
```tsx
<div>
  <h1>Section 1</h1>
  <Space h="xl" />
  <p>Section 2</p>
</div>
```

**ScrollArea:** Custom scrollbars
```tsx
<ScrollArea size="medium" type="hover" style={{ height: 300 }}>
  <div style={{ height: 1000 }}>Long content</div>
</ScrollArea>
```

**AreaGrid:** Named grid areas
```tsx
<AreaGrid
  areas='"header header" "sidebar main" "footer footer"'
  columns="200px 1fr"
  rows="auto 1fr auto"
  gap="m"
>
  <AreaGrid.Item area="header">Header</AreaGrid.Item>
  <AreaGrid.Item area="sidebar">Sidebar</AreaGrid.Item>
  <AreaGrid.Item area="main">Main</AreaGrid.Item>
  <AreaGrid.Item area="footer">Footer</AreaGrid.Item>
</AreaGrid>
```

## Responsive System

### Responsive Values
```tsx
type ResponsiveValue<T> = T | Partial<Record<BreakpointKey, T>>;
```

### Default Breakpoints
```tsx
{
  xs: 0,    // Mobile first
  sm: 576,  // Small devices
  md: 768,  // Medium devices  
  lg: 992,  // Large devices
  xl: 1200, // Extra large
  xxl: 1920 // Extra extra large
}
```

### Default Spacing Scale
```tsx
{
  none: 0,   // 0
  xs: 4,     // 0.25rem
  s: 8,      // 0.5rem
  m: 16,     // 1rem (default)
  l: 24,     // 1.5rem
  xl: 32,    // 2rem
  xxl: 48,   // 3rem
  xxxl: 64   // 4rem
}
```

### Container Width Hook
```tsx
import { useContainerWidth } from "@apvee/react-layout-kit";

function ResponsiveComponent() {
  const containerRef = React.useRef<HTMLDivElement>(null);
  const containerWidth = useContainerWidth(containerRef);
  
  return (
    <div ref={containerRef}>
      <Box 
        containerWidth={containerWidth}
        $padding={{ xs: "s", md: "m" }}
      >
        Container-aware responsive content
      </Box>
    </div>
  );
}
```

## Component Composition with Slot

### asChild Pattern
```tsx
// Render Box as different elements
<Box asChild $padding="m" $backgroundColor="blue">
  <button onClick={handleClick}>Styled Button</button>
</Box>

<Box asChild $display="inline-block" $textDecoration="none">
  <a href="/about">Styled Link</a>
</Box>
```

### Slot Component
```tsx
import { Slot } from "@apvee/react-layout-kit";

<Slot onClick={handleClick} className="custom-class">
  <button className="btn">Merged props</button>
</Slot>
```

## Common Patterns

### Layout Patterns
```tsx
// Page layout
<Container>
  <Stack gap="xl">
    <header>Header content</header>
    <Flex direction={{ xs: "column", md: "row" }} gap="l">
      <Box $flex={1}>Main content</Box>
      <Box w={{ xs: "100%", md: "300px" }}>Sidebar</Box>
    </Flex>
    <footer>Footer content</footer>
  </Stack>
</Container>

// Card grid
<SimpleGrid cols={{ xs: 1, sm: 2, lg: 3 }} spacing="m">
  {items.map(item => (
    <Box key={item.id} $padding="m" $border="1px solid #ddd" $borderRadius={8}>
      <Stack gap="s">
        <h3>{item.title}</h3>
        <p>{item.description}</p>
      </Stack>
    </Box>
  ))}
</SimpleGrid>

// Form layout
<Stack gap="m" align="stretch">
  <Box>
    <label>Name</label>
    <input type="text" />
  </Box>
  <Box>
    <label>Email</label>
    <input type="email" />
  </Box>
  <Flex justify="flex-end" gap="s">
    <button type="button">Cancel</button>
    <button type="submit">Submit</button>
  </Flex>
</Stack>
```

### Custom Components
```tsx
// Custom Card component
interface CardProps extends BoxProps {
  variant?: "primary" | "secondary";
  elevation?: "low" | "high";
}

function Card({ variant = "primary", elevation = "low", children, ...props }: CardProps) {
  const variantStyles = {
    primary: { $backgroundColor: "white", $color: "black" },
    secondary: { $backgroundColor: "#f5f5f5", $color: "#666" }
  };
  
  const elevationStyles = {
    low: { $boxShadow: "0 2px 4px rgba(0,0,0,0.1)" },
    high: { $boxShadow: "0 8px 16px rgba(0,0,0,0.15)" }
  };
  
  return (
    <Box
      $padding="m"
      $borderRadius={8}
      {...variantStyles[variant]}
      {...elevationStyles[elevation]}
      {...props}
    >
      {children}
    </Box>
  );
}
```

## TypeScript Integration

### Component Props
```tsx
import type { BoxProps, FlexProps, StackProps } from "@apvee/react-layout-kit";

interface CustomComponentProps extends BoxProps {
  variant?: string;
  size?: "small" | "large";
}
```

### Responsive Types
```tsx
import type { ResponsiveValue, SpacingValue } from "@apvee/react-layout-kit";

const responsivePadding: ResponsiveValue<SpacingValue> = { xs: "s", md: "m" };
```

## Best Practices

1. **Use responsive values for container-aware design**
2. **Prefer short props for spacing (p, m, etc.)**
3. **Use dollar props for full CSS control**
4. **Leverage asChild for component composition**
5. **Use Stack for vertical layouts, Flex for complex layouts**
6. **Container + SimpleGrid for page layouts**
7. **Custom components should extend BoxProps**
8. **Use useContainerWidth for dynamic responsive behavior**

## CSS Utilities

### Class Merging
```tsx
import { mergeClasses, createStyles } from "@apvee/react-layout-kit";

const customClass = createStyles({ color: "red" });
const combinedClass = mergeClasses("base-class", customClass, conditionalClass);

<Box className={combinedClass}>Styled content</Box>
```

This guide provides all the essential information needed for LLM-based code generation with @apvee/react-layout-kit.